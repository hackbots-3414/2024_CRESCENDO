package frc.robot.generated;

import java.math.BigDecimal;

import com.ctre.phoenix6.configs.Slot0Configs;
import com.ctre.phoenix6.mechanisms.swerve.SwerveDrivetrainConstants;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstantsFactory;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModule.ClosedLoopOutputType;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants.SteerFeedbackType;

import edu.wpi.first.math.util.Units;
import frc.robot.subsystems.CommandSwerveDrivetrain;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
public class TunerConstants {
    // Both sets of gains need to be tuned to your individual robot.

    // The steer motor uses any SwerveModule.SteerRequestType control request with the
    // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
    private static final Slot0Configs steerGains = new Slot0Configs()
        .withKP(100.0).withKI(0).withKD(0.2) //kp = 100 kd = 0.2
        .withKS(0).withKV(1.5).withKA(0);
    // When using closed-loop control, the drive motor uses the control
    // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
    private static final Slot0Configs driveGains = new Slot0Configs()
        .withKP(0.028257).withKI(0).withKD(0)
        .withKS(0).withKV(0.11798).withKA(0.02499625);

    // The closed-loop output type to use for the steer motors;
    // This affects the PID/FF gains for the steer motors
    private static final ClosedLoopOutputType steerClosedLoopOutput = ClosedLoopOutputType.Voltage;
    // The closed-loop output type to use for the drive motors;
    // This affects the PID/FF gains for the drive motors
    private static final ClosedLoopOutputType driveClosedLoopOutput = ClosedLoopOutputType.Voltage;

    // The stator current at which the wheels start to slip;
    // This needs to be tuned to your individual robot
    private static final double kSlipCurrentA = 50.0;

    // Theoretical free speed (m/s) at 12v applied output;
    // This needs to be tuned to your individual robot
    public static final double kSpeedAt12VoltsMps = 5.21;

    // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
    // This may need to be tuned to your individual robot
    private static final double kCoupleRatio = 3.5714285714285716;

    public static final double kDriveGearRatio = 6.122448979591837; // 6.122448979591837
    public static final BigDecimal kDriveGearRatioBig = new BigDecimal(kDriveGearRatio);
    private static final double kSteerGearRatio = 21.428571428571427;
    private static final double kWheelRadiusInches = 1.9; // 1.985; // 3.78 / 2.0; // 3.974 // new wheels radius is 1.985" (3.97" diameter)

    private static final boolean kSteerMotorReversed = true; // FIXES IDLE SPIN ERROR
    private static final boolean kInvertLeftSide = false;
    private static final boolean kInvertRightSide = true;

    private static final String kCANbusName = "CANivore";
    private static final int kPigeonId = 50;


    // These are only used for simulation
    private static final double kSteerInertia = 0.00001;
    private static final double kDriveInertia = 0.001;
    // Simulated voltage necessary to overcome friction
    private static final double kSteerFrictionVoltage = 0.25;
    private static final double kDriveFrictionVoltage = 0.25;

    private static final SwerveDrivetrainConstants DrivetrainConstants = new SwerveDrivetrainConstants()
            .withPigeon2Id(kPigeonId)
            .withCANbusName(kCANbusName);

    private static final SwerveModuleConstantsFactory ConstantCreator = new SwerveModuleConstantsFactory()
            .withDriveMotorGearRatio(kDriveGearRatio)
            .withSteerMotorGearRatio(kSteerGearRatio)
            .withWheelRadius(kWheelRadiusInches)
            .withSlipCurrent(kSlipCurrentA)
            .withSteerMotorGains(steerGains)
            .withDriveMotorGains(driveGains)
            .withSteerMotorClosedLoopOutput(steerClosedLoopOutput)
            .withDriveMotorClosedLoopOutput(driveClosedLoopOutput)
            .withSpeedAt12VoltsMps(kSpeedAt12VoltsMps)
            .withSteerInertia(kSteerInertia)
            .withDriveInertia(kDriveInertia)
            .withSteerFrictionVoltage(kSteerFrictionVoltage)
            .withDriveFrictionVoltage(kDriveFrictionVoltage)
            .withFeedbackSource(SteerFeedbackType.RemoteCANcoder)
            .withCouplingGearRatio(kCoupleRatio)
            .withSteerMotorInverted(kSteerMotorReversed);


    // Front Left
    private static final int kFrontLeftDriveMotorId = 11;
    private static final int kFrontLeftSteerMotorId = 12;
    private static final int kFrontLeftEncoderId = 13;
    private static final double kFrontLeftEncoderOffset = 0.197265625;

    private static final double kFrontLeftXPosInches = 10.375;
    private static final double kFrontLeftYPosInches = 10.375;

    // Front Right
    private static final int kFrontRightDriveMotorId = 21;
    private static final int kFrontRightSteerMotorId = 22;
    private static final int kFrontRightEncoderId = 23;
    private static final double kFrontRightEncoderOffset = -0.017333984375;

    private static final double kFrontRightXPosInches = 10.375;
    private static final double kFrontRightYPosInches = -10.375;

    // Back Left
    private static final int kBackLeftDriveMotorId = 31;
    private static final int kBackLeftSteerMotorId = 32;
    private static final int kBackLeftEncoderId = 33;
    private static final double kBackLeftEncoderOffset = 0.390625;

    private static final double kBackLeftXPosInches = -10.375;
    private static final double kBackLeftYPosInches = 10.375;

    // Back Right
    private static final int kBackRightDriveMotorId = 41;
    private static final int kBackRightSteerMotorId = 42;
    private static final int kBackRightEncoderId = 43;
    private static final double kBackRightEncoderOffset = 0.174072265625;

    private static final double kBackRightXPosInches = -10.375;
    private static final double kBackRightYPosInches = -10.375;


    private static final SwerveModuleConstants FrontLeft = ConstantCreator.createModuleConstants(
            kFrontLeftSteerMotorId, kFrontLeftDriveMotorId, kFrontLeftEncoderId, kFrontLeftEncoderOffset, Units.inchesToMeters(kFrontLeftXPosInches), Units.inchesToMeters(kFrontLeftYPosInches), kInvertLeftSide);
    private static final SwerveModuleConstants FrontRight = ConstantCreator.createModuleConstants(
            kFrontRightSteerMotorId, kFrontRightDriveMotorId, kFrontRightEncoderId, kFrontRightEncoderOffset, Units.inchesToMeters(kFrontRightXPosInches), Units.inchesToMeters(kFrontRightYPosInches), kInvertRightSide);
    private static final SwerveModuleConstants BackLeft = ConstantCreator.createModuleConstants(
            kBackLeftSteerMotorId, kBackLeftDriveMotorId, kBackLeftEncoderId, kBackLeftEncoderOffset, Units.inchesToMeters(kBackLeftXPosInches), Units.inchesToMeters(kBackLeftYPosInches), kInvertLeftSide);
    private static final SwerveModuleConstants BackRight = ConstantCreator.createModuleConstants(
            kBackRightSteerMotorId, kBackRightDriveMotorId, kBackRightEncoderId, kBackRightEncoderOffset, Units.inchesToMeters(kBackRightXPosInches), Units.inchesToMeters(kBackRightYPosInches), kInvertRightSide);

    public static final CommandSwerveDrivetrain DriveTrain = new CommandSwerveDrivetrain(DrivetrainConstants, FrontLeft,
            FrontRight, BackLeft, BackRight);
}



// Lovelace Constants

// package frc.robot.generated;

// import com.ctre.phoenix6.configs.Slot0Configs;
// import com.ctre.phoenix6.mechanisms.swerve.SwerveDrivetrainConstants;
// import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants;
// import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstantsFactory;
// import com.ctre.phoenix6.mechanisms.swerve.SwerveModule.ClosedLoopOutputType;
// import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants.SteerFeedbackType;

// import edu.wpi.first.math.util.Units;
// import frc.robot.subsystems.CommandSwerveDrivetrain;

// // Generated by the Tuner X Swerve Project Generator
// // https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
// public class TunerConstantsLoveLace {
//     // Both sets of gains need to be tuned to your individual robot.

//     // The steer motor uses any SwerveModule.SteerRequestType control request with the
//     // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
//     private static final Slot0Configs steerGains = new Slot0Configs()
//         .withKP(100).withKI(0).withKD(0.2)
//         .withKS(0).withKV(1.5).withKA(0);
//     // When using closed-loop control, the drive motor uses the control
//     // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
//     private static final Slot0Configs driveGains = new Slot0Configs()
//         .withKP(3).withKI(0).withKD(0)
//         .withKS(0).withKV(0).withKA(0);

//     // The closed-loop output type to use for the steer motors;
//     // This affects the PID/FF gains for the steer motors
//     private static final ClosedLoopOutputType steerClosedLoopOutput = ClosedLoopOutputType.Voltage;
//     // The closed-loop output type to use for the drive motors;
//     // This affects the PID/FF gains for the drive motors
//     private static final ClosedLoopOutputType driveClosedLoopOutput = ClosedLoopOutputType.Voltage;

//     // The stator current at which the wheels start to slip;
//     // This needs to be tuned to your individual robot
//     private static final double kSlipCurrentA = 300.0;

//     // Theoretical free speed (m/s) at 12v applied output;
//     // This needs to be tuned to your individual robot
//     public static final double kSpeedAt12VoltsMps = 5.21;

//     // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
//     // This may need to be tuned to your individual robot
//     private static final double kCoupleRatio = 3.5714285714285716;

//     private static final double kDriveGearRatio = 6.122448979591837;
//     private static final double kSteerGearRatio = 21.428571428571427;
//     private static final double kWheelRadiusInches = 2;

//     private static final boolean kSteerMotorReversed = true;
//     private static final boolean kInvertLeftSide = false;
//     private static final boolean kInvertRightSide = true;

//     private static final String kCANbusName = "CANivore";
//     private static final int kPigeonId = 50;


//     // These are only used for simulation
//     private static final double kSteerInertia = 0.00001;
//     private static final double kDriveInertia = 0.001;
//     // Simulated voltage necessary to overcome friction
//     private static final double kSteerFrictionVoltage = 0.25;
//     private static final double kDriveFrictionVoltage = 0.25;

//     private static final SwerveDrivetrainConstants DrivetrainConstants = new SwerveDrivetrainConstants()
//             .withPigeon2Id(kPigeonId)
//             .withCANbusName(kCANbusName);

//     private static final SwerveModuleConstantsFactory ConstantCreator = new SwerveModuleConstantsFactory()
//             .withDriveMotorGearRatio(kDriveGearRatio)
//             .withSteerMotorGearRatio(kSteerGearRatio)
//             .withWheelRadius(kWheelRadiusInches)
//             .withSlipCurrent(kSlipCurrentA)
//             .withSteerMotorGains(steerGains)
//             .withDriveMotorGains(driveGains)
//             .withSteerMotorClosedLoopOutput(steerClosedLoopOutput)
//             .withDriveMotorClosedLoopOutput(driveClosedLoopOutput)
//             .withSpeedAt12VoltsMps(kSpeedAt12VoltsMps)
//             .withSteerInertia(kSteerInertia)
//             .withDriveInertia(kDriveInertia)
//             .withSteerFrictionVoltage(kSteerFrictionVoltage)
//             .withDriveFrictionVoltage(kDriveFrictionVoltage)
//             .withFeedbackSource(SteerFeedbackType.FusedCANcoder)
//             .withCouplingGearRatio(kCoupleRatio)
//             .withSteerMotorInverted(kSteerMotorReversed);


//     // Front Left
//     private static final int kFrontLeftDriveMotorId = 11;
//     private static final int kFrontLeftSteerMotorId = 12;
//     private static final int kFrontLeftEncoderId = 13;
//     private static final double kFrontLeftEncoderOffset = -0.15283203125;

//     private static final double kFrontLeftXPosInches = 10.5625;
//     private static final double kFrontLeftYPosInches = 10.5625;

//     // Front Right
//     private static final int kFrontRightDriveMotorId = 21;
//     private static final int kFrontRightSteerMotorId = 22;
//     private static final int kFrontRightEncoderId = 23;
//     private static final double kFrontRightEncoderOffset = -0.116455078125;

//     private static final double kFrontRightXPosInches = 10.5625;
//     private static final double kFrontRightYPosInches = -10.5625;

//     // Back Left
//     private static final int kBackLeftDriveMotorId = 31;
//     private static final int kBackLeftSteerMotorId = 32;
//     private static final int kBackLeftEncoderId = 33;
//     private static final double kBackLeftEncoderOffset = 0.390380859375;

//     private static final double kBackLeftXPosInches = -10.5625;
//     private static final double kBackLeftYPosInches = 10.5625;

//     // Back Right
//     private static final int kBackRightDriveMotorId = 41;
//     private static final int kBackRightSteerMotorId = 42;
//     private static final int kBackRightEncoderId = 43;
//     private static final double kBackRightEncoderOffset = 0.49658203125;

//     private static final double kBackRightXPosInches = -10.5625;
//     private static final double kBackRightYPosInches = -10.5625;


//     private static final SwerveModuleConstants FrontLeft = ConstantCreator.createModuleConstants(
//             kFrontLeftSteerMotorId, kFrontLeftDriveMotorId, kFrontLeftEncoderId, kFrontLeftEncoderOffset, Units.inchesToMeters(kFrontLeftXPosInches), Units.inchesToMeters(kFrontLeftYPosInches), kInvertLeftSide);
//     private static final SwerveModuleConstants FrontRight = ConstantCreator.createModuleConstants(
//             kFrontRightSteerMotorId, kFrontRightDriveMotorId, kFrontRightEncoderId, kFrontRightEncoderOffset, Units.inchesToMeters(kFrontRightXPosInches), Units.inchesToMeters(kFrontRightYPosInches), kInvertRightSide);
//     private static final SwerveModuleConstants BackLeft = ConstantCreator.createModuleConstants(
//             kBackLeftSteerMotorId, kBackLeftDriveMotorId, kBackLeftEncoderId, kBackLeftEncoderOffset, Units.inchesToMeters(kBackLeftXPosInches), Units.inchesToMeters(kBackLeftYPosInches), kInvertLeftSide);
//     private static final SwerveModuleConstants BackRight = ConstantCreator.createModuleConstants(
//             kBackRightSteerMotorId, kBackRightDriveMotorId, kBackRightEncoderId, kBackRightEncoderOffset, Units.inchesToMeters(kBackRightXPosInches), Units.inchesToMeters(kBackRightYPosInches), kInvertRightSide);

//     public static final CommandSwerveDrivetrain DriveTrain = new CommandSwerveDrivetrain(DrivetrainConstants, FrontLeft,
//             FrontRight, BackLeft, BackRight);
// }



//TOOTHLESS CONSTANTS


// package frc.robot.generated;

// import com.ctre.phoenix6.configs.Slot0Configs;
// import com.ctre.phoenix6.mechanisms.swerve.SwerveDrivetrainConstants;
// import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants;
// import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstantsFactory;
// import com.ctre.phoenix6.mechanisms.swerve.SwerveModule.ClosedLoopOutputType;
// import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants.SteerFeedbackType;

// import edu.wpi.first.math.util.Units;
// import frc.robot.CommandSwerveDrivetrain;

// public class TunerConstants {
//     // Both sets of gains need to be tuned to your individual robot.

//     // The steer motor uses any SwerveModule.SteerRequestType control request with the
//     // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
//     private static final Slot0Configs steerGains = new Slot0Configs()
//         .withKP(100).withKI(0).withKD(0.2)
//         .withKS(0).withKV(1.5).withKA(0);
//     // When using closed-loop control, the drive motor uses the control
//     // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
//     private static final Slot0Configs driveGains = new Slot0Configs()
//         .withKP(3).withKI(0).withKD(0)
//         .withKS(0).withKV(0).withKA(0);

//     // The closed-loop output type to use for the steer motors;
//     // This affects the PID/FF gains for the steer motors
//     private static final ClosedLoopOutputType steerClosedLoopOutput = ClosedLoopOutputType.Voltage;
//     // The closed-loop output type to use for the drive motors;
//     // This affects the PID/FF gains for the drive motors
//     private static final ClosedLoopOutputType driveClosedLoopOutput = ClosedLoopOutputType.Voltage;

//     // The stator current at which the wheels start to slip;
//     // This needs to be tuned to your individual robot
//     private static final double kSlipCurrentA = 300.0;

//     // Theoretical free speed (m/s) at 12v applied output;
//     // This needs to be tuned to your individual robot
//     public static final double kSpeedAt12VoltsMps = 3.92;

//     // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
//     // This may need to be tuned to your individual robot
//     private static final double kCoupleRatio = 3.5714285714285716;

//     private static final double kDriveGearRatio = 8.142857142857142;
//     private static final double kSteerGearRatio = 21.428571428571427;
//     private static final double kWheelRadiusInches = 2;

//     private static final boolean kSteerMotorReversed = true;
//     private static final boolean kInvertLeftSide = false;
//     private static final boolean kInvertRightSide = true;

//     private static final String kCANbusName = "CANivore";
//     private static final int kPigeonId = 25;


//     // These are only used for simulation
//     private static final double kSteerInertia = 0.00001;
//     private static final double kDriveInertia = 0.001;
//     // Simulated voltage necessary to overcome friction
//     private static final double kSteerFrictionVoltage = 0.25;
//     private static final double kDriveFrictionVoltage = 0.25;

//     private static final SwerveDrivetrainConstants DrivetrainConstants = new SwerveDrivetrainConstants()
//             .withPigeon2Id(kPigeonId)
//             .withCANbusName(kCANbusName);

//     private static final SwerveModuleConstantsFactory ConstantCreator = new SwerveModuleConstantsFactory()
//             .withDriveMotorGearRatio(kDriveGearRatio)
//             .withSteerMotorGearRatio(kSteerGearRatio)
//             .withWheelRadius(kWheelRadiusInches)
//             .withSlipCurrent(kSlipCurrentA)
//             .withSteerMotorGains(steerGains)
//             .withDriveMotorGains(driveGains)
//             .withSteerMotorClosedLoopOutput(steerClosedLoopOutput)
//             .withDriveMotorClosedLoopOutput(driveClosedLoopOutput)
//             .withSpeedAt12VoltsMps(kSpeedAt12VoltsMps)
//             .withSteerInertia(kSteerInertia)
//             .withDriveInertia(kDriveInertia)
//             .withSteerFrictionVoltage(kSteerFrictionVoltage)
//             .withDriveFrictionVoltage(kDriveFrictionVoltage)
//             .withFeedbackSource(SteerFeedbackType.RemoteCANcoder)
//             .withCouplingGearRatio(kCoupleRatio)
//             .withSteerMotorInverted(kSteerMotorReversed);


//     // Front Left
//     private static final int kFrontLeftDriveMotorId = 8;
//     private static final int kFrontLeftSteerMotorId = 9;
//     private static final int kFrontLeftEncoderId = 7;
//     private static final double kFrontLeftEncoderOffset = -0.237548828125;

//     private static final double kFrontLeftXPosInches = 10.5625;
//     private static final double kFrontLeftYPosInches = 10.5625;

//     // Front Right
//     private static final int kFrontRightDriveMotorId = 1;
//     private static final int kFrontRightSteerMotorId = 0;
//     private static final int kFrontRightEncoderId = 2;
//     private static final double kFrontRightEncoderOffset = -0.213623046875;

//     private static final double kFrontRightXPosInches = 10.5625;
//     private static final double kFrontRightYPosInches = -10.5625;

//     // Back Left
//     private static final int kBackLeftDriveMotorId = 11;
//     private static final int kBackLeftSteerMotorId = 10;
//     private static final int kBackLeftEncoderId = 12;
//     private static final double kBackLeftEncoderOffset = -0.361083984375;

//     private static final double kBackLeftXPosInches = -10.5625;
//     private static final double kBackLeftYPosInches = 10.5625;

//     // Back Right
//     private static final int kBackRightDriveMotorId = 30;
//     private static final int kBackRightSteerMotorId = 31;
//     private static final int kBackRightEncoderId = 32;
//     private static final double kBackRightEncoderOffset = -0.246826171875;

//     private static final double kBackRightXPosInches = -10.5625;
//     private static final double kBackRightYPosInches = -10.5625;


//     private static final SwerveModuleConstants FrontLeft = ConstantCreator.createModuleConstants(
//             kFrontLeftSteerMotorId, kFrontLeftDriveMotorId, kFrontLeftEncoderId, kFrontLeftEncoderOffset, Units.inchesToMeters(kFrontLeftXPosInches), Units.inchesToMeters(kFrontLeftYPosInches), kInvertLeftSide);
//     private static final SwerveModuleConstants FrontRight = ConstantCreator.createModuleConstants(
//             kFrontRightSteerMotorId, kFrontRightDriveMotorId, kFrontRightEncoderId, kFrontRightEncoderOffset, Units.inchesToMeters(kFrontRightXPosInches), Units.inchesToMeters(kFrontRightYPosInches), kInvertRightSide);
//     private static final SwerveModuleConstants BackLeft = ConstantCreator.createModuleConstants(
//             kBackLeftSteerMotorId, kBackLeftDriveMotorId, kBackLeftEncoderId, kBackLeftEncoderOffset, Units.inchesToMeters(kBackLeftXPosInches), Units.inchesToMeters(kBackLeftYPosInches), kInvertLeftSide);
//     private static final SwerveModuleConstants BackRight = ConstantCreator.createModuleConstants(
//             kBackRightSteerMotorId, kBackRightDriveMotorId, kBackRightEncoderId, kBackRightEncoderOffset, Units.inchesToMeters(kBackRightXPosInches), Units.inchesToMeters(kBackRightYPosInches), kInvertRightSide);

//     public static final CommandSwerveDrivetrain DriveTrain = new CommandSwerveDrivetrain(DrivetrainConstants, FrontLeft,
//             FrontRight, BackLeft, BackRight);
// }